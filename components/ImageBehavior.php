<?php
   /**
    * Author: dkhru
    * Date: 08.12.15
    * Time: 5:30
    * Project: is
    */

   namespace dkhru\imageStore\components;


   use dkhru\imageStore\models\Image;
   use yii\base\Behavior;
   use yii\db\ActiveRecord;
   use yii\db\Transaction;
   use yii\helpers\Url;
   use yii\web\UploadedFile;

   class ImageBehavior extends Behavior
   {
      public $imageFields;

      /**
       * @var ImageStore || null
       */
      public $iStore;

      public function __get($name)
      {
         if( preg_match('/^(.+)(_image)$/', $name, $m) && isset( $m[ 1 ] ) && isset( $this->imageFields[ $m[ 1 ] ] ) ){
            return $this->getImage($m[ 1 ]);
         }
         return parent::__get($name); // TODO: Change the autogenerated stub
      }

      public function canGetProperty($name, $checkVars=true)
      {
         if( preg_match('/^(.+)(_image)$/', $name, $m) && isset( $m[ 1 ] ) && isset( $this->imageFields[ $m[ 1 ] ] ) ){
            return true;
         }

         return parent::canGetProperty($name, $checkVars); // TODO: Change the autogenerated stub
      }


      private function getImageFieldName($field=null)
      {
         if( $field === null )
            if( count($this->imageFields) == 1 ){
               foreach( $this->imageFields as $f=>$o )
                  $field=$f;
            }else{
               return null;
            }
         return isset( $this->imageFields[ $field ] ) ? $field : null;
      }


      private function getImageField($field=null)
      {
         $field=$this->getImageFieldName($field);
         return isset( $this->imageFields[ $field ] ) ? $this->imageFields[ $field ] : null;
      }

      /**
       * @return \yii\db\ActiveQuery
       */
      protected function getImage($field=null)
      {
         $field=$this->getImageFieldName($field);
         return ( $field === null ) ? null : $this->owner->hasOne(Image::className(), [ 'id'=>$field ]);
      }


      public function hasProperty($name, $checkVars=true)
      {
         return parent::hasProperty($name, $checkVars); // TODO: Change the autogenerated stub
      }

      /**
       * @param  UploadedFile $file
       * @param null          $field
       * @param null          $variants
       */
      public function setImage($file, $variants=null,$fieldName=null)
      {
         if(!isset($fieldName))
            $fieldName = $this->getImageFieldName();
         $field=$this->getImageField($fieldName);
         if( isset( $file ) && isset( $field ) ){
            if( isset( $variants ) ){
               $variants=$this->iStore->convertVariants($variants);
            }elseif( isset( $field[ 'variants' ] ) ){
               // converted on init
               $variants=$field[ 'variants' ];
            }
//            if(!$this->owner->isNewRecord)
//               if( isset( $this->owner->{$fieldName} ) ){
//                  $old_id = $this->owner->{$fieldName};
//                  $this->owner->{$fieldName} = null;
//                  $this->owner->save(false);
//                  $this->iStore->deleteImage($old_id, $field[ 'store_id' ]);
//               }
            $image = $this->iStore->saveImage($file, $field['store_id'],$variants,false);
            $this->owner->{$fieldName} = $image->id;
         }

      }

      public function events()
      {
         return [
            ActiveRecord::EVENT_BEFORE_DELETE => 'onBeforeDelete',
         ];
      }

      public function onBeforeDelete($event){
         foreach($this->imageFields as $fieldName=>$field){
            $this->iStore->deleteImage($this->owner->{$fieldName},$field['store_id']);
         }
      }

      public function getInternalUrl($variant_id,$field=null){
         $image = $this->owner->{$this->getImageFieldName($field).'_image'};
         if (isset($image))
            return $image->getInternalUrl($variant_id);
         else
            return Url::to([ImageStore::CONTROLLER_MAP.'/image','id'=>$this->owner->id,'variant_id'=>$variant_id,'ext'=>'png']);
      }


   }